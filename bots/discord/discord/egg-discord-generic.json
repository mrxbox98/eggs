{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v1",
        "update_url": null
    },
    "exported_at": "2021-07-27T04:47:14+02:00",
    "name": "discord generic",
    "author": "parker@parkervcp.com",
    "description": "A generic Discord bot\r\n\r\nMake sure to pick the correct image",
    "features": null,
    "images": [
        "ghcr.io\/pterodactyl\/yolks:java_7",
        "ghcr.io\/pterodactyl\/yolks:java_8",
        "ghcr.io\/pterodactyl\/yolks:java_9",
        "ghcr.io\/pterodactyl\/yolks:java_11",
        "ghcr.io\/pterodactyl\/yolks:java_14",
        "ghcr.io\/pterodactyl\/yolks:java_16",
        "ghcr.io\/pterodactyl\/yolks:nodejs_12",
        "ghcr.io\/pterodactyl\/yolks:nodejs_14",
        "ghcr.io\/pterodactyl\/yolks:nodejs_15",
        "ghcr.io\/pterodactyl\/yolks:nodejs_16",
        "ghcr.io\/pterodactyl\/yolks:python_3.7",
        "ghcr.io\/pterodactyl\/yolks:python_3.8",
        "ghcr.io\/pterodactyl\/yolks:python_3.9"
    ],
    "file_denylist": [],
    "startup": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then \/usr\/local\/bin\/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then \/usr\/local\/bin\/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f \/home\/container\/package.json ]; then \/usr\/local\/bin\/npm install; fi; \/usr\/local\/bin\/node \/home\/container\/{{BOT_FILE}} if [[ {{DISCORD_TYPE}} == \"Discord Py\" ]]; then if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \\\"1\\\" ]]; then git pull; fi; if [[ ! -z {{PY_PACKAGES}} ]]; then pip install -U --target .local\\\/lib\\\/python3.8\\\/site-packages {{PY_PACKAGES}}; fi; if [[ -f \\\/home\\\/container\\\/${REQUIREMENTS_FILE} ]]; then pip install -U --target .local\\\/lib\\\/python3.8\\\/site-packages -r ${REQUIREMENTS_FILE}; fi; \\\/usr\\\/local\\\/bin\\\/python \\\/home\\\/container\\\/{{BOT_FILE}}; if [[ {{DISCORD_TYPE}} == \"Discord Java\" ]]; then java -Dterminal.jline=false -Dterminal.ansi=true -jar {{BOT_FILE}};",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": \"change this part\"\r\n}",
        "logs": "{}",
        "stop": "^c"
    },
    "scripts": {
        "installation": {
            "script": "# Generic Discord Bot\r\n#Discord Js section\r\nif [ \"${DISCORD_TYPE}\" == \"Discord Js\" ]; then\r\n    apt update\r\n    apt install -y git curl jq file unzip make gcc g++ python python-dev libtool\r\n    \r\n    mkdir -p \/mnt\/server\r\n    cd \/mnt\/server\r\n    \r\n    if [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n        echo -e \"assuming user knows what they are doing have a good day.\"\r\n        exit 0\r\n    fi\r\n    \r\n    ## add git ending if it's not on the address\r\n    if [[ ${GIT_ADDRESS} != *.git ]]; then\r\n        GIT_ADDRESS=${GIT_ADDRESS}.git\r\n    fi\r\n    \r\n    if [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n        echo -e \"using anon api call\"\r\n    else\r\n        GIT_ADDRESS=\"https:\/\/${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d\/ -f3-)\"\r\n    fi\r\n    \r\n    ## pull git js bot repo\r\n    if [ \"$(ls -A \/mnt\/server)\" ]; then\r\n        echo -e \"\/mnt\/server directory is not empty.\"\r\n        if [ -d .git ]; then\r\n            echo -e \".git directory exists\"\r\n            if [ -f .git\/config ]; then\r\n                echo -e \"loading info from git config\"\r\n                ORIGIN=$(git config --get remote.origin.url)\r\n            else\r\n                echo -e \"files found with no git config\"\r\n                echo -e \"closing out without touching things to not break anything\"\r\n                exit 10\r\n            fi\r\n        fi\r\n    \r\n        if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n            echo \"pulling latest from github\"\r\n            git pull\r\n        fi\r\n    else\r\n        echo -e \"\/mnt\/server is empty.\\ncloning files into repo\"\r\n        if [ -z ${BRANCH} ]; then\r\n            echo -e \"cloning default branch\"\r\n            git clone ${GIT_ADDRESS} .\r\n        else\r\n            echo -e \"cloning ${BRANCH}'\"\r\n            git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n        fi\r\n    \r\n    fi\r\n    \r\n    echo \"Installing nodejs packages\"\r\n    if [[ ! -z ${NODE_PACKAGES} ]]; then\r\n        \/usr\/local\/bin\/npm install ${NODE_PACKAGES}\r\n    fi\r\n    \r\n    if [ -f \/mnt\/server\/package.json ]; then\r\n        \/usr\/local\/bin\/npm install --production\r\n    fi\r\n    \r\n    echo -e \"install complete\"\r\n    exit 0\r\nfi\r\n#Discord Py section\r\nif [ \"${DISCORD_TYPE}\" == \"Discord Py\" ]; then\r\n    apt update\r\n    apt install -y git curl jq file unzip make gcc g++ python python-dev libtool\r\n    \r\n    mkdir -p \/mnt\/server\r\n    cd \/mnt\/server\r\n    \r\n    if [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n        echo -e \"assuming user knows what they are doing have a good day.\"\r\n        exit 0\r\n    fi\r\n    \r\n    ## add git ending if it's not on the address\r\n    if [[ ${GIT_ADDRESS} != *.git ]]; then\r\n        GIT_ADDRESS=${GIT_ADDRESS}.git\r\n    fi\r\n    \r\n    if [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n        echo -e \"using anon api call\"\r\n    else\r\n        GIT_ADDRESS=\"https:\/\/${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d\/ -f3-)\"\r\n    fi\r\n    \r\n    ## pull git js bot repo\r\n    if [ \"$(ls -A \/mnt\/server)\" ]; then\r\n        echo -e \"\/mnt\/server directory is not empty.\"\r\n        if [ -d .git ]; then\r\n            echo -e \".git directory exists\"\r\n            if [ -f .git\/config ]; then\r\n                echo -e \"loading info from git config\"\r\n                ORIGIN=$(git config --get remote.origin.url)\r\n            else\r\n                echo -e \"files found with no git config\"\r\n                echo -e \"closing out without touching things to not break anything\"\r\n                exit 10\r\n            fi\r\n        fi\r\n    \r\n        if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n            echo \"pulling latest from github\"\r\n            git pull\r\n        fi\r\n    else\r\n        echo -e \"\/mnt\/server is empty.\\ncloning files into repo\"\r\n        if [ -z ${BRANCH} ]; then\r\n            echo -e \"cloning default branch\"\r\n            git clone ${GIT_ADDRESS} .\r\n        else\r\n            echo -e \"cloning ${BRANCH}'\"\r\n            git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n        fi\r\n    \r\n    fi\r\n    \r\n    export HOME=\/mnt\/server\r\n    \r\n    echo \"Installing python requirements into folder\"\r\n    if [[ ! -z ${PY_PACKAGES} ]]; then\r\n        pip install -U --target .local\/lib\/python3.8\/site-packages ${PY_PACKAGES}\r\n    fi\r\n    \r\n    if [ -f \/mnt\/server\/requirements.txt ]; then\r\n        pip install -U --target .local\/lib\/python3.8\/site-packages -r ${REQUIREMENTS_FILE}\r\n    fi\r\n    \r\n    echo -e \"install complete\"\r\n    exit 0\r\nfi\r\n#Discord Java\r\nif [ \"$DISCORD_TYPE\" == \"Discord Java\" ]; then\r\n    PROJECT=java\r\n\r\n    apt update\r\n    apt install -y curl jq\r\n    \r\n    cd \/mnt\/server\r\nfi",
            "container": "node:14-buster-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Git Repo Address",
            "description": "GitHub Repo to clone\r\n\r\nI.E. https:\/\/github.com\/parkervcp\/repo_name",
            "env_variable": "GIT_ADDRESS",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string"
        },
        {
            "name": "Install Branch",
            "description": "The branch of the bot to install.",
            "env_variable": "BRANCH",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string"
        },
        {
            "name": "User Uploaded Files",
            "description": "Skip all the install stuff if you are letting a user upload files.\r\n\r\n0 = false (default)\r\n1 = true",
            "env_variable": "USER_UPLOAD",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|bool"
        },
        {
            "name": "Auto Update",
            "description": "Pull the latest files on startup when using a GitHub repo.",
            "env_variable": "AUTO_UPDATE",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean"
        },
        {
            "name": "Bot file",
            "description": "The file that starts the bot.",
            "env_variable": "BOT_FILE",
            "default_value": "index.js",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string"
        },
        {
            "name": "Additional Node packages",
            "description": "Install additional node packages.\r\n\r\nUse spaces to separate. (Only for js)",
            "env_variable": "NODE_PACKAGES",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string"
        },
        {
            "name": "Uninstall Node packages",
            "description": "Uninstall node packages.\r\n\r\nUse spaces to separate. (Only for js)",
            "env_variable": "UNNODE_PACKAGES",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string"
        },
        {
            "name": "Git Username",
            "description": "Username to auth with git.",
            "env_variable": "USERNAME",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string"
        },
        {
            "name": "Git Access Token",
            "description": "Password to use with git.\r\n\r\nIt's best practice to use a Personal Access Token.\r\nhttps:\/\/github.com\/settings\/tokens\r\nhttps:\/\/gitlab.com\/-\/profile\/personal_access_tokens",
            "env_variable": "ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string"
        },
        {
            "name": "Discord bot type",
            "description": "Discord Js, Discord Py, Discord Go, or Discord Java",
            "env_variable": "DISCORD_TYPE",
            "default_value": "Discord Js",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string"
        },
        {
            "name": "Additional Python packages",
            "description": "Install additional python packages.\r\n\r\nUse spaces to separate (Only for python)",
            "env_variable": "PY_PACKAGES",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string"
        },
        {
            "name": "Requirements file",
            "description": "if there are other requirements files to choose from. (Only for python)",
            "env_variable": "REQUIREMENTS_FILE",
            "default_value": "requirements.txt",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string"
        }
    ]
}